-- 🐔 Tabla de productos
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    type VARCHAR(50) NOT NULL CHECK (type IN ('combo', 'porcion', 'individual')),
    available BOOLEAN DEFAULT TRUE
);

-- 📦 Pedidos (no requiere login del cliente)
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    customer_name VARCHAR(100),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) DEFAULT 'pendiente' CHECK (status IN ('pendiente', 'en preparación', 'entregado', 'cancelado')),
    
    -- Opcional: empleado/admin que gestionó el pedido
    handled_by INT REFERENCES users(id)
);

-- 🛒 Productos por pedido (relación muchos a muchos)
CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(id) ON DELETE CASCADE,
    product_id INT REFERENCES products(id),
    quantity INT NOT NULL,
    price_at_order DECIMAL(10,2) NOT NULL,  -- copia del precio en el momento del pedido
    subtotal DECIMAL(10,2) GENERATED ALWAYS AS (quantity * price_at_order) STORED
);

-- 🧾 Facturas (relación uno a uno con pedido)
CREATE TABLE invoices (
    id SERIAL PRIMARY KEY,
    order_id INT UNIQUE REFERENCES orders(id) ON DELETE CASCADE,
    invoice_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50) DEFAULT 'efectivo' CHECK (payment_method IN ('efectivo', 'tarjeta', 'QR')),
    nit_cliente VARCHAR(20),
    nombre_cliente_factura VARCHAR(100)
);

-- 🔐 Usuarios administradores (para login del panel de administración)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    role VARCHAR(20) DEFAULT 'admin' CHECK (role IN ('admin', 'empleado')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);




-- Agregar campo para la imagen del producto
ALTER TABLE public.products
ADD COLUMN image_url TEXT;

-- Agregar campo estado con valores restringidos
ALTER TABLE public.products
ADD COLUMN estado VARCHAR(50) DEFAULT 'disponible' 
CHECK (estado IN ('disponible', 'agotado', 'temporalmente no disponible'));

-- Agregar campo para controlar el stock disponible
ALTER TABLE public.products
ADD COLUMN stock INT DEFAULT 0 
CHECK (stock >= 0);

--------------------------------------------------------------------------

-------NUEVAS TABLAS---------

-- Database: db_polleria

-- DROP DATABASE IF EXISTS db_polleria;

CREATE DATABASE db_polleria
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'es-MX'
    LC_CTYPE = 'es-MX'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;


-- Table: public.products

-- DROP TABLE IF EXISTS public.products;

CREATE TABLE IF NOT EXISTS public.products
(
    id integer NOT NULL DEFAULT nextval('products_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    price numeric(10,2) NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    available boolean DEFAULT true,
    image_url text COLLATE pg_catalog."default",
    estado character varying(50) COLLATE pg_catalog."default" DEFAULT 'disponible'::character varying,
    stock integer DEFAULT 0,
    CONSTRAINT products_pkey PRIMARY KEY (id),
    CONSTRAINT products_type_check CHECK (type::text = ANY (ARRAY['combo'::character varying, 'porcion'::character varying, 'individual'::character varying]::text[])),
    CONSTRAINT products_estado_check CHECK (estado::text = ANY (ARRAY['disponible'::character varying, 'agotado'::character varying, 'temporalmente no disponible'::character varying]::text[])),
    CONSTRAINT products_stock_check CHECK (stock >= 0)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.products
    OWNER to postgres;


-- Table: public.users

-- DROP TABLE IF EXISTS public.users;

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT nextval('users_id_seq'::regclass),
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password_hash text COLLATE pg_catalog."default" NOT NULL,
    role character varying(20) COLLATE pg_catalog."default" DEFAULT 'admin'::character varying,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_username_key UNIQUE (username),
    CONSTRAINT users_role_check CHECK (role::text = ANY (ARRAY['admin'::character varying, 'empleado'::character varying]::text[]))
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.users
    OWNER to postgres;
-- Table: public.orders

-- DROP TABLE IF EXISTS public.orders;

CREATE TABLE IF NOT EXISTS public.orders
(
    id integer NOT NULL DEFAULT nextval('orders_id_seq'::regclass),
    customer_name character varying(100) COLLATE pg_catalog."default",
    order_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'pendiente'::character varying,
    handled_by integer,
    CONSTRAINT orders_pkey PRIMARY KEY (id),
    CONSTRAINT orders_handled_by_fkey FOREIGN KEY (handled_by)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT orders_status_check CHECK (status::text = ANY (ARRAY['pendiente'::character varying, 'en preparación'::character varying, 'entregado'::character varying, 'cancelado'::character varying]::text[]))
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.orders
    OWNER to postgres;
-- Table: public.order_items

-- DROP TABLE IF EXISTS public.order_items;

CREATE TABLE IF NOT EXISTS public.order_items
(
    id integer NOT NULL DEFAULT nextval('order_items_id_seq'::regclass),
    order_id integer,
    product_id integer,
    quantity integer NOT NULL,
    price_at_order numeric(10,2) NOT NULL,
    subtotal numeric(10,2) GENERATED ALWAYS AS (((quantity)::numeric * price_at_order)) STORED,
    CONSTRAINT order_items_pkey PRIMARY KEY (id),
    CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id)
        REFERENCES public.orders (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT order_items_product_id_fkey FOREIGN KEY (product_id)
        REFERENCES public.products (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.order_items
    OWNER to postgres;
-- Table: public.invoices

-- DROP TABLE IF EXISTS public.invoices;

CREATE TABLE IF NOT EXISTS public.invoices
(
    id integer NOT NULL DEFAULT nextval('invoices_id_seq'::regclass),
    order_id integer,
    invoice_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    total_amount numeric(10,2) NOT NULL,
    payment_method character varying(50) COLLATE pg_catalog."default" DEFAULT 'efectivo'::character varying,
    nit_cliente character varying(20) COLLATE pg_catalog."default",
    nombre_cliente_factura character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT invoices_pkey PRIMARY KEY (id),
    CONSTRAINT invoices_order_id_key UNIQUE (order_id),
    CONSTRAINT invoices_order_id_fkey FOREIGN KEY (order_id)
        REFERENCES public.orders (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT invoices_payment_method_check CHECK (payment_method::text = ANY (ARRAY['efectivo'::character varying, 'tarjeta'::character varying, 'QR'::character varying]::text[]))
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.invoices
    OWNER to postgres;